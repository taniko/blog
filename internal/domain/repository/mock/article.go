// Code generated by MockGen. DO NOT EDIT.
// Source: article.go
//
// Generated by this command:
//
//	mockgen -source=article.go -destination=mock/article.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	mo "github.com/samber/mo"
	article "github.com/taniko/blog/internal/domain/event/article"
	article0 "github.com/taniko/blog/internal/domain/model/article"
	vo "github.com/taniko/blog/internal/domain/model/article/vo"
	gomock "go.uber.org/mock/gomock"
)

// MockArticle is a mock of Article interface.
type MockArticle struct {
	ctrl     *gomock.Controller
	recorder *MockArticleMockRecorder
}

// MockArticleMockRecorder is the mock recorder for MockArticle.
type MockArticleMockRecorder struct {
	mock *MockArticle
}

// NewMockArticle creates a new mock instance.
func NewMockArticle(ctrl *gomock.Controller) *MockArticle {
	mock := &MockArticle{ctrl: ctrl}
	mock.recorder = &MockArticleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticle) EXPECT() *MockArticleMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockArticle) Find(ctx context.Context, id vo.ID) mo.Result[article0.Article] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(mo.Result[article0.Article])
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockArticleMockRecorder) Find(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockArticle)(nil).Find), ctx, id)
}

// Store mocks base method.
func (m *MockArticle) Store(ctx context.Context, e article.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockArticleMockRecorder) Store(ctx, e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockArticle)(nil).Store), ctx, e)
}
