// Code generated by MockGen. DO NOT EDIT.
// Source: stack.go
//
// Generated by this command:
//
//	mockgen -source=stack.go -destination=mock/stack.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	mo "github.com/samber/mo"
	event "github.com/taniko/blog/internal/domain/event"
	stack "github.com/taniko/blog/internal/domain/model/stack"
	vo "github.com/taniko/blog/internal/domain/model/stack/vo"
	gomock "go.uber.org/mock/gomock"
)

// MockStack is a mock of Stack interface.
type MockStack struct {
	ctrl     *gomock.Controller
	recorder *MockStackMockRecorder
}

// MockStackMockRecorder is the mock recorder for MockStack.
type MockStackMockRecorder struct {
	mock *MockStack
}

// NewMockStack creates a new mock instance.
func NewMockStack(ctrl *gomock.Controller) *MockStack {
	mock := &MockStack{ctrl: ctrl}
	mock.recorder = &MockStackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStack) EXPECT() *MockStackMockRecorder {
	return m.recorder
}

// FindChannel mocks base method.
func (m *MockStack) FindChannel(ctx context.Context, id vo.ChannelID) mo.Result[stack.Channel] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindChannel", ctx, id)
	ret0, _ := ret[0].(mo.Result[stack.Channel])
	return ret0
}

// FindChannel indicates an expected call of FindChannel.
func (mr *MockStackMockRecorder) FindChannel(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindChannel", reflect.TypeOf((*MockStack)(nil).FindChannel), ctx, id)
}

// GetMessages mocks base method.
func (m *MockStack) GetMessages(ctx context.Context, channelID vo.ChannelID) mo.Result[[]stack.Message] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", ctx, channelID)
	ret0, _ := ret[0].(mo.Result[[]stack.Message])
	return ret0
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockStackMockRecorder) GetMessages(ctx, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockStack)(nil).GetMessages), ctx, channelID)
}

// Save mocks base method.
func (m *MockStack) Save(ctx context.Context, events []event.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockStackMockRecorder) Save(ctx, events any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStack)(nil).Save), ctx, events)
}
