// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: taniko/blog/post/v1/post.proto

package postv1connect

import (
	connect "connectrpc.com/connect"
	v1 "github.com/taniko/blog/internal/gen/taniko/blog/post/v1"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PostServiceName is the fully-qualified name of the PostService service.
	PostServiceName = "taniko.blog.post.v1.PostService"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	postServiceServiceDescriptor = v1.File_taniko_blog_post_v1_post_proto.Services().ByName("PostService")
)

// PostServiceClient is a client for the taniko.blog.post.v1.PostService service.
type PostServiceClient interface {
}

// NewPostServiceClient constructs a client for the taniko.blog.post.v1.PostService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPostServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PostServiceClient {
	return &postServiceClient{}
}

// postServiceClient implements PostServiceClient.
type postServiceClient struct {
}

// PostServiceHandler is an implementation of the taniko.blog.post.v1.PostService service.
type PostServiceHandler interface {
}

// NewPostServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPostServiceHandler(svc PostServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	return "/taniko.blog.post.v1.PostService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPostServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPostServiceHandler struct{}
